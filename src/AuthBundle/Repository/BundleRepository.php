<?php

namespace AuthBundle\Repository;

use Doctrine\ORM\EntityRepository;
/**
 * BundleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BundleRepository extends EntityRepository
{
    public function findByNot( array $criteria, array $orderBy = null, $limit = null, $offset = null )
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $expr = $this->getEntityManager()->getExpressionBuilder();

        $qb->select( 'entity' )
            ->from( $this->getEntityName(), 'entity' );

        foreach ( $criteria as $field => $value ) {

            $qb->andWhere( $expr->neq( 'entity.' . $field, $value ) );
        }

        if ( $orderBy ) {

            foreach ( $orderBy as $field => $order ) {

                $qb->addOrderBy( 'entity.' . $field, $order );
            }
        }

        if ( $limit )
            $qb->setMaxResults( $limit );

        if ( $offset )
            $qb->setFirstResult( $offset );

        return $qb->getQuery()
            ->getResult();
    }
    
    public function getBundles ($active = true, $configurable = true, $id_bundles = array())
    {
        //$qb = $this->getEntityManager()->createQueryBuilder();
        //$expr = $this->getEntityManager()->getExpressionBuilder();

        $qb = $this->createQueryBuilder('b');
        
        if($configurable) :
            $qb->andWhere($qb->expr()->isNotNull('b.config_route'));
        endif;
        
        if($active) :
            $qb->andWhere('b.active = :active')->setParameter('active', $active);
        endif;
        
        if(count($id_bundles))
        {
            $qb->andWhere('b.id IN (:id_bundles)')->setParameter('id_bundles', $id_bundles);
            $qb->orderBy('field(b.id, '.implode(',', $id_bundles).')');
        } else {
            return array();
            //$qb->orderBy('b.id', 'ASC');
        }
        //echo '<pre>'; 
        //print_r($qb->getQuery()->getSql());
        //print_r($qb->getQuery()->getParameters());
        return $qb->getQuery()->getResult();
    }
}
