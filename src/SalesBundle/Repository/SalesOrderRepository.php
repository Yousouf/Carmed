<?php

namespace SalesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * SalesOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesOrderRepository extends \Doctrine\ORM\EntityRepository
{
    public function getOrders($limit, $start, $desc, $orderBy, $q)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select("u.id , CONCAT(u.firstname, ' ',u.lastname) as customer, u.totalpaid, u.dateAdd, u.status, count(v.id) as product")
            ->from('SalesBundle:SalesOrder', 'u')
            ->leftjoin('SalesBundle:OrderProducts', 'v', 'WITH', 'v.idOrder = u.id')
            ->groupby("u.id");

        $query1 = $this->getEntityManager()
            ->createQueryBuilder()
            ->select("COUNT(u.id) as count")
            ->from('SalesBundle:SalesOrder', 'u');


        if (!empty($q)) {
            $query->where(implode(' and ', $q));
            $query1->where(implode(' and ', $q));
        }

        if ($orderBy != '') :
            $query->orderBy($orderBy, $desc);
        endif;

        $count = $query1->getQuery()->getOneOrNullResult();

        if($limit == -1){
            $results = $query->getQuery()->getArrayResult();
        }else{
            $paginator = new Paginator($query,false);
            $paginator->getQuery()
                ->setFirstResult($start)
                ->setMaxResults($limit);

            $results = $paginator->getIterator()->getArrayCopy();
        }
        $records["data"] = array();
        foreach($results as &$result){
			$records["data"][] = array(
			  '<input type="checkbox" name="id[]" value="'.$result['id'].'">',
			  $result['id'],
			  $result['customer'],
			  number_format($result['totalpaid'],3,'.',' '),
			  $result['dateAdd']->format('Y-m-d H:i:s'),
			  $result['product'],
			  $result['status'],
			);

        }
		$records["recordsTotal"] = $count['count'];
		$records["recordsFiltered"] = $count['count'];
		
        return $records;
    }
    
    public function getLastInvoice()
    {

        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select("MAX(u.invoiceNumber) as max")
            ->from('SalesBundle:SalesOrder', 'u');

        $max = $query->getQuery()->getOneOrNullResult(); 
		
        return (isset($max['max'])) ? (int)$max['max'] : 0;
    }
}
